//--------------------------------------
//--- 010 Editor v3.0.3 Binary Template
//
// File:
// Author:
// Revision:
// Purpose:
//--------------------------------------

enum Magic {
    PACK = 0x5041434B
  , AIDX = 0x41494458
};

local   Magic mode = PACK;

struct PackageHeader
{
    uint32  magic;
    uint32  version;
    uint64  unkown_008[64];
    uint64  file_size;
    uint64  unkown_210;
    uint64  block_list_offset;
    uint32  block_count;
    uint32  unkown_224_block_index; // some block index
    uint32  type_block_index;
    uint32  unkown_22C[3];
};

struct PackageBlock
{
    uint64  block_size;
    local   int64 data_pos = FTell();
    char    data[block_size];
    uint64  block_size;
};

struct IndexHeader
{
    uint32 magic;
    uint32 version;
    uint32 client_build;
    uint32 client_version; // maybe root_block?
};

struct IndexDirectoryEntry
{
    uint32      file_name_offset;
    uint32      block_index;
    //Printf( "directory_unknown: %x\n",  unknown_04);
};

struct IndexFileEntry
{
    uint32      file_name_offset;
    uint32      unknown_00; // unused
    FILETIME    file_time;
    uint64      file_size[2];
    char        hash[20]; // sha-1
    uint32      unknown_02; // mabye padding to put sha-1 in 3 uint64
};

struct String
{
    string data;
};

struct IndexList
{
    uint32                  dir_count;
    uint32                  file_count;
    if(dir_count)
    {
        IndexDirectoryEntry     dirs[dir_count]<optimize=true>;
    }
    if(file_count)
    {
        IndexFileEntry          files[file_count]<optimize=true>;
    }
    local uint32 string_count = dir_count+file_count;
    if( string_count )
    {
        String                  strings[string_count]<optimize=false>;
    }
};

struct BlockListEntry
{
    uint64 offset;
    uint64 size;
};

LittleEndian();

PackageHeader   package_header;
if( package_header.magic != PACK )
{
    Warning( "File is not a valid wildstar file. Template stopped." );
    return -1;
}

//local uint32 i;
//for( i = 0; i < package_header.block_count && !FEof(); ++i )
//{
//    PackageBlock   package_blocks;
//}

FSeek( package_header.block_list_offset );
BlockListEntry  block_list[package_header.block_count]<optimize=true>;

FSeek( block_list[1].offset );
IndexList   root;

local uint32 i;
for( i = 3; i < package_header.block_count; ++i )
{
    if( block_list[i].size )
    {
        FSeek( block_list[i].offset );
        IndexList   childs;
    }
}
