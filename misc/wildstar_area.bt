//--------------------------------------
//--- 010 Editor v3.0.3 Binary Template
//
// File:
// Author:
// Revision:
// Purpose:
//--------------------------------------

LittleEndian();

enum Magic {
    area = 0x61726561
  , AREA = 0x41524541
  , CHNK = 0x43484E4B
};

struct AreaHeader
{
    uint32  magic;
    uint32  version;
};

struct ChunkHeader
{
    uint32  magic;
    uint32  size;
};

enum ChunkFlags
{
                    //0x384101C7
    LAYER_0         = 0x00000000
  , LAYER_1         = 0x00000008
  , LAYER_2         = 0x00000100
  , LAYER_3         = 0x00010000
  , PROPERTY_65BF   = 0x00400000
  , LAYER_4         = 0x08000000
  , PROPERTY_75CF   = 0x10000000
  , LAYER_5         = 0x20000000
};

struct ChunkEntry
{
    SetBackColor( cLtGreen );
    uint16  size;
    uint16  unknown_2;
    SetBackColor( cNone );
    local int64 pos = FTell();

uint32 flags;
uint16 unknown_8[361]; // seems to be some 19*19 grid

uint32 unknown_2DA[4];

uint16 unknown_2EA[65*65];

if( flags & LAYER_1 )
{
    uint16 height_map[65*65];
}

uint16 unknown_44EE[40];

if( flags & LAYER_1 )
{
    char shadow_map[65*65];
}

if( flags & LAYER_3 )
{
    char unknown_55BF[64*64];
}

if( flags & PROPERTY_65BF )
{
    uint32 unknown_65BF[4];
}

if( flags & LAYER_4 )
{
    char unknown_65CF[64*64]; // maybe colisions
}

if( flags & PROPERTY_75CF )
{
    uint32 unknown_75CF[4];
}

if( flags & LAYER_5 )
{
    uint16 unknown_75DF[65*65];
}

    FSeek(pos);
    // contains multiple blocks
    // 1 block 65x65 bytes seems to be some kind of shadow map or similar
    char    data[size]<optimize=false>;
};

struct PropDescriptions
{
    uint32  magic;
    uint32  size;
    char    data[size]<optimize=false>;
};

AreaHeader area_header;
// TODO make case insensitive check
if( area_header.magic != area && area_header.magic != AREA )
{
    Warning( "File is not a valid wildstar area file. Template stopped." );
    return -1;
}

struct Chunks
{
    ChunkHeader chunk_header;
    if( chunk_header.magic != CHNK )
    {
        Warning( "File is not a valid wildstar area file. Template stopped." );
        return -1;
    }
    
    local int64 chunk_end = FTell() + chunk_header.size;
    while( FTell() < chunk_end )
    {
        ChunkEntry chunk_entry;
    }
} chunks;

// only if props where defined in chnk !?
//PropDescriptions prop_descriptions;
